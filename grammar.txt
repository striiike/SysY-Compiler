   <Decl>          := ['const'] <BType> <Def> { ',' <Def> } ';'
   <Def>           := Ident { '[' <ConstExp> ']'  } [ '=' <InitVal> ]
   <InitVal>       := <ExpInitVal> | <ArrInitVal>
   <ExpInitVal>    := <Exp>
   <ArrInitVal>    := '{' [ <InitVal> { ',' <InitVal> } ] '}'



   <LVal>          := Ident { '[' <Exp> ']' }                                                                           // public class LVal { ident, class Index, List<Index> }
   <PrimaryExp>    := '(' <Exp> ')' | <LVal> | <Number>                                                                 //         Look forward: '(' :: <SubExp>, <Ident> :: <LVal>, <IntConst> :: <Number>
   <FunctionCall>  := <Ident> '(' [ <FuncRParams> ] ')'
   <FuncRParams>   := <Exp> { ',', <Exp> } // List<Exp>
   <UnaryExp>      := { <UnaryOp> } (<PrimaryExp> | <FunctionCall>)
                                                                                                                        Ident '(' :: <FunctionCall>, Ident :: <LVal>, '(' :: <SubExp>, IntConst :: <Number>


   <FuncDef>       := <FuncType> Ident '(' [<FuncFParams> ] ')' <Block>
   <MainFuncDef>   := 'int' 'main' '(' ')' <Block>
   <FuncType>      := 'void' | 'int'
   <FuncFParams>   := <FuncFParam> { ',' <FuncFParam> }
   <FuncFParam>    := <BType> Ident [ '[' ']' { '[' <ConstExp> ']' } ]


   <AssignStmt>    := <LVal> '=' <Exp>
   <ExpStmt>       := <Exp>
   <BreakStmt>     := 'break'
   <ContinueStmt>  := 'continue'
   <ReturnStmt>    := 'return' [<Exp>]
   <GetintStmt>    := <LVal> '=' 'getint' '(' ')'
   <PrintfStmt>    := 'printf' '(' FormatString { ',' <Exp> } ')'
   <SimpleStmt>    := <AssignStmt> | <ExpStmt> | <BreakStmt> | <ContinueStmt> | <ReturnStmt> | <GetintStmt> | <PrintfStmt>

   <IfStmt>        := 'if' '(' <Cond> ')' <Stmt> [ 'else' <Stmt> ]
   <_ForStmt>      :=  <LVal> '=' <Exp>    // real forStmt
   <ForStmt>       := 'for' '(' [<_ForStmt>] ';' [<Cond>] ';' [<_ForStmt>] ')' Stmt
   <ComplexStmt>   := <IfStmt> | <ForStmt> | <Block>

   <Stmt>          := ';' | <SimpleStmt> ';' | <ComplexStmt>    // 将分号放在这里统一处理
   <BlockItem>     := <Decl> | <Stmt>
   <Block>         := '{' { <BlockItem> } '}'

   <CompUnit>      := { <Decl> } { <FuncDef> } <MainFuncDef>