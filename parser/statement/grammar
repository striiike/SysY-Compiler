// 以分号结尾的简单语句
<AssignStmt>    := <LVal> '=' <Exp> // 这些新增非终结符的组成不含分号
<ExpStmt>       := <Exp>            // 空语句放到最后了
<BreakStmt>     := 'break'
<ContinueStmt>  := 'continue'
<ReturnStmt>    := 'return' [<Exp>]
<GetintStmt>     := <LVal> '=' 'getint' '(' ')'
<PrintfStmt>    := 'printf' '(' FormatString { ',' <Exp> } ')'
<SimpleStmt>       := <AssignStmt> | <ExpStmt> | <BreakStmt> | <ContinueStmt>
    | <ReturnStmt> | <GetintStmt> | <PrintfStmt> // <SimpleStmt> 是以分号结尾的语句(不含分号)的合集
// 复杂的语句
<IfStmt>        := 'if' '(' <Cond> ')' <Stmt> [ 'else' <Stmt> ]
<ForStmt>       := 'for' '(' [AssignStmt] ';' [Cond] ';' [AssignStmt] ')' Stmt
<ComplexStmt>       := <IfStmt> | <ForStmt> | <Block>

<Stmt>          := ';' | <SimpleStmt> ';' | <ComplexStmt>    // 将分号放在这里统一处理

<BlockItem>     := <Decl> | <Stmt>

<Block>         := '{' { <BlockItem> } '}'